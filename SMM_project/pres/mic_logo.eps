%!PS-Adobe-3.0 EPSF-3.0
%%Creator: xpdf/pdftops 3.01
%%LanguageLevel: 2
%%BoundingBox: 0 0 157 130
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.01 0
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add axialCol sc
    exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
    0 360 arc h
    dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
    0 360 arc h f*
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
0 0 157 130 re
W
q
q
[1 0 0 1 -148 -538] cm
q
[1 0 0 1 0 0] cm
0 0 612 792 re
W
[1 0 0 1 133.768 692.105] cm
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 343.711 0] cm
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 -343.711 -24.907] cm
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 15.058 -128.791] cm
q
/DeviceRGB {} CS
[0 0 0] SC
/DeviceRGB {} cs
[0 0 0] sc
0.3985 w
q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 4.88235 155.941 3.19252 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 21.42 155.941 3.19254 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 37.9577 155.941 3.19251 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 54.4954 155.941 3.19252 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 87.9767 155.941 3.19252 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 104.514 155.941 3.19252 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 121.052 155.941 3.19253 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
14.1764 71.033 141.764 3.19252 re
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
0 0 m
0 65.9941 l
0 75.0841 7.28946 82.3735 16.3794 82.3735 c
25.4694 82.3735 32.7589 75.0841 32.7589 65.9941 c
32.7589 0 l
0 0 l
h
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
36.5185 0 m
36.5185 65.9941 l
36.5185 75.0841 43.8079 82.3735 52.8979 82.3735 c
61.9879 82.3735 69.2774 75.0841 69.2774 65.9941 c
69.2774 0 l
36.5185 0 l
h
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
73.037 0 m
73.037 65.9941 l
73.037 75.0841 80.3265 82.3735 89.4164 82.3735 c
98.5064 82.3735 105.796 75.0841 105.796 65.9941 c
105.796 0 l
73.037 0 l
h
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
108.988 0 46.9523 82.3736 re
W
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
191.362 41.1868 m
191.362 64.0451 173.034 82.3735 150.175 82.3735 c
127.317 82.3735 108.988 64.0451 108.988 41.1868 c
108.988 18.3284 127.317 0 150.175 0 c
173.034 0 191.362 18.3284 191.362 41.1868 c
h
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
q
/DeviceRGB {} cs
[0.115997 0.564987 1] sc
/DeviceRGB {} CS
[0.115997 0.564987 1] SC
112.099 106.111 m
112.099 118.699 102.005 128.793 89.4164 128.793 c
76.8279 128.793 66.7342 118.699 66.7342 106.111 c
66.7342 93.5221 76.8279 83.4283 89.4164 83.4283 c
102.005 83.4283 112.099 93.5221 112.099 106.111 c
h
f
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
q
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-0.1134 13.1512 156.508 3.19254 re
f
Q
q
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-0.1134 29.6888 156.508 3.19253 re
f
Q
q
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-0.1134 46.2265 156.508 3.19254 re
f
Q
q
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-0.1134 62.7642 156.508 3.19254 re
f
Q
q
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-0.1134 96.2455 156.508 3.19254 re
f
Q
q
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-0.1134 112.783 156.508 3.19254 re
f
Q
Q
Q
[1 0 0 1 -15.058 -449.042] cm
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 343.711 0] cm
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
